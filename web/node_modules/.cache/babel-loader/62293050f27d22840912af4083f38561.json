{"ast":null,"code":"import produce from \"immer\";\nimport { ActionType } from \"state/action-types\";\nconst initialState = {\n  loading: false,\n  error: null,\n  order: [],\n  data: {}\n};\n\nconst randomId = () => {\n  return Math.random().toString(36).substr(2, 5);\n};\n\nconst reducer = produce((state = initialState, action) => {\n  switch (action.type) {\n    case ActionType.UPDATE_CELL:\n      const {\n        id,\n        content\n      } = action.payload;\n      state.data[id].content = content;\n      return state;\n\n    case ActionType.DELETE_CELL:\n      delete state.data[action.payload];\n      state.order.filter(id => id !== action.payload);\n      return state;\n\n    case ActionType.MOVE_CELL:\n      const {\n        direction\n      } = action.payload;\n      const index = state.order.findIndex(id => id === action.payload.id);\n      const targetIndex = direction === \"up\" ? index - 1 : index + 1;\n\n      if (targetIndex < 0 || targetIndex > state.order.length - 1) {\n        return state;\n      }\n\n      state.order[index] = state.order[targetIndex];\n      state.order[targetIndex] = action.payload.id;\n      return state;\n\n    case ActionType.INSERT_CELL_BEFORE:\n      const cell = {\n        content: \"\",\n        type: action.payload.type,\n        id: randomId()\n      };\n      state.data[cell.id] = cell;\n      const foundIndex = state.order.findIndex(id => id === action.payload.id);\n\n      if (foundIndex < 0) {\n        state.order.push(cell.id);\n      } else {\n        state.order.splice(foundIndex, 0, cell.id);\n      }\n\n      return state;\n\n    default:\n      return state;\n  }\n});\nexport default reducer;","map":{"version":3,"sources":["/home/mfahmy/workspace/react/codebook/src/state/reducers/cell-reducer.ts"],"names":["produce","ActionType","initialState","loading","error","order","data","randomId","Math","random","toString","substr","reducer","state","action","type","UPDATE_CELL","id","content","payload","DELETE_CELL","filter","MOVE_CELL","direction","index","findIndex","targetIndex","length","INSERT_CELL_BEFORE","cell","foundIndex","push","splice"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AACA,SAASC,UAAT,QAA2B,oBAA3B;AAaA,MAAMC,YAAuB,GAAG;AAC9BC,EAAAA,OAAO,EAAE,KADqB;AAE9BC,EAAAA,KAAK,EAAE,IAFuB;AAG9BC,EAAAA,KAAK,EAAE,EAHuB;AAI9BC,EAAAA,IAAI,EAAE;AAJwB,CAAhC;;AAOA,MAAMC,QAAQ,GAAG,MAAM;AACrB,SAAOC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,MAA3B,CAAkC,CAAlC,EAAqC,CAArC,CAAP;AACD,CAFD;;AAIA,MAAMC,OAAO,GAAGZ,OAAO,CAAC,CAACa,KAAgB,GAAGX,YAApB,EAAkCY,MAAlC,KAAqD;AAC3E,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKd,UAAU,CAACe,WAAhB;AACE,YAAM;AAAEC,QAAAA,EAAF;AAAMC,QAAAA;AAAN,UAAkBJ,MAAM,CAACK,OAA/B;AACAN,MAAAA,KAAK,CAACP,IAAN,CAAWW,EAAX,EAAeC,OAAf,GAAyBA,OAAzB;AACA,aAAOL,KAAP;;AAEF,SAAKZ,UAAU,CAACmB,WAAhB;AACE,aAAOP,KAAK,CAACP,IAAN,CAAWQ,MAAM,CAACK,OAAlB,CAAP;AACAN,MAAAA,KAAK,CAACR,KAAN,CAAYgB,MAAZ,CAAoBJ,EAAD,IAAQA,EAAE,KAAKH,MAAM,CAACK,OAAzC;AACA,aAAON,KAAP;;AAEF,SAAKZ,UAAU,CAACqB,SAAhB;AACE,YAAM;AAAEC,QAAAA;AAAF,UAAgBT,MAAM,CAACK,OAA7B;AACA,YAAMK,KAAK,GAAGX,KAAK,CAACR,KAAN,CAAYoB,SAAZ,CAAuBR,EAAD,IAAQA,EAAE,KAAKH,MAAM,CAACK,OAAP,CAAeF,EAApD,CAAd;AACA,YAAMS,WAAW,GAAGH,SAAS,KAAK,IAAd,GAAqBC,KAAK,GAAG,CAA7B,GAAiCA,KAAK,GAAG,CAA7D;;AAEA,UAAIE,WAAW,GAAG,CAAd,IAAmBA,WAAW,GAAGb,KAAK,CAACR,KAAN,CAAYsB,MAAZ,GAAqB,CAA1D,EAA6D;AAC3D,eAAOd,KAAP;AACD;;AAEDA,MAAAA,KAAK,CAACR,KAAN,CAAYmB,KAAZ,IAAqBX,KAAK,CAACR,KAAN,CAAYqB,WAAZ,CAArB;AACAb,MAAAA,KAAK,CAACR,KAAN,CAAYqB,WAAZ,IAA2BZ,MAAM,CAACK,OAAP,CAAeF,EAA1C;AACA,aAAOJ,KAAP;;AAEF,SAAKZ,UAAU,CAAC2B,kBAAhB;AACE,YAAMC,IAAU,GAAG;AACjBX,QAAAA,OAAO,EAAE,EADQ;AAEjBH,QAAAA,IAAI,EAAED,MAAM,CAACK,OAAP,CAAeJ,IAFJ;AAGjBE,QAAAA,EAAE,EAAEV,QAAQ;AAHK,OAAnB;AAMAM,MAAAA,KAAK,CAACP,IAAN,CAAWuB,IAAI,CAACZ,EAAhB,IAAsBY,IAAtB;AAEA,YAAMC,UAAU,GAAGjB,KAAK,CAACR,KAAN,CAAYoB,SAAZ,CAChBR,EAAD,IAAQA,EAAE,KAAKH,MAAM,CAACK,OAAP,CAAeF,EADb,CAAnB;;AAIA,UAAIa,UAAU,GAAG,CAAjB,EAAoB;AAClBjB,QAAAA,KAAK,CAACR,KAAN,CAAY0B,IAAZ,CAAiBF,IAAI,CAACZ,EAAtB;AACD,OAFD,MAEO;AACLJ,QAAAA,KAAK,CAACR,KAAN,CAAY2B,MAAZ,CAAmBF,UAAnB,EAA+B,CAA/B,EAAkCD,IAAI,CAACZ,EAAvC;AACD;;AAED,aAAOJ,KAAP;;AAEF;AACE,aAAOA,KAAP;AA9CJ;AAgDD,CAjDsB,CAAvB;AAmDA,eAAeD,OAAf","sourcesContent":["import produce from \"immer\";\nimport { ActionType } from \"state/action-types\";\nimport { Action } from \"state/actions\";\nimport { Cell } from \"state/cell\";\n\ninterface CellState {\n  loading: boolean;\n  error: string | null;\n  order: string[];\n  data: {\n    [key: string]: Cell;\n  };\n}\n\nconst initialState: CellState = {\n  loading: false,\n  error: null,\n  order: [],\n  data: {},\n};\n\nconst randomId = () => {\n  return Math.random().toString(36).substr(2, 5);\n};\n\nconst reducer = produce((state: CellState = initialState, action: Action) => {\n  switch (action.type) {\n    case ActionType.UPDATE_CELL:\n      const { id, content } = action.payload;\n      state.data[id].content = content;\n      return state;\n\n    case ActionType.DELETE_CELL:\n      delete state.data[action.payload];\n      state.order.filter((id) => id !== action.payload);\n      return state;\n\n    case ActionType.MOVE_CELL:\n      const { direction } = action.payload;\n      const index = state.order.findIndex((id) => id === action.payload.id);\n      const targetIndex = direction === \"up\" ? index - 1 : index + 1;\n\n      if (targetIndex < 0 || targetIndex > state.order.length - 1) {\n        return state;\n      }\n\n      state.order[index] = state.order[targetIndex];\n      state.order[targetIndex] = action.payload.id;\n      return state;\n\n    case ActionType.INSERT_CELL_BEFORE:\n      const cell: Cell = {\n        content: \"\",\n        type: action.payload.type,\n        id: randomId(),\n      };\n\n      state.data[cell.id] = cell;\n\n      const foundIndex = state.order.findIndex(\n        (id) => id === action.payload.id\n      );\n\n      if (foundIndex < 0) {\n        state.order.push(cell.id);\n      } else {\n        state.order.splice(foundIndex, 0, cell.id);\n      }\n\n      return state;\n\n    default:\n      return state;\n  }\n});\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}