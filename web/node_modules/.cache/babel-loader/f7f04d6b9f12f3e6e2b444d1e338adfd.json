{"ast":null,"code":"import { bundle } from \"bundler\";\nimport { ActionType } from \"state/action-types\";\nlet timer;\nexport const bundlerMiddleware = ({\n  getState,\n  dispatch\n}) => next => action => {\n  next(action);\n\n  if (action.type !== ActionType.UPDATE_CELL) {\n    return;\n  }\n\n  const {\n    cells: {\n      data\n    }\n  } = getState();\n  const cell = data[action.payload.id];\n\n  if (cell.type === \"markdown\") {\n    return;\n  }\n\n  clearTimeout(timer);\n  timer = setTimeout(async () => {\n    console.log(\"starting bundling\");\n    const result = await bundle(action.payload.content);\n    dispatch({\n      type: ActionType.BUNDLE_CREATED,\n      payload: result\n    });\n  }, 750);\n};","map":{"version":3,"sources":["/home/mfahmy/workspace/react/codebook/src/state/middleware/bundler-middleware.ts"],"names":["bundle","ActionType","timer","bundlerMiddleware","getState","dispatch","next","action","type","UPDATE_CELL","cells","data","cell","payload","id","clearTimeout","setTimeout","console","log","result","content","BUNDLE_CREATED"],"mappings":"AAAA,SAASA,MAAT,QAAuB,SAAvB;AACA,SAASC,UAAT,QAA2B,oBAA3B;AAGA,IAAIC,KAAJ;AAEA,OAAO,MAAMC,iBAA6B,GACxC,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KACCC,IAAD,IACCC,MAAD,IAAY;AACVD,EAAAA,IAAI,CAACC,MAAD,CAAJ;;AAEA,MAAIA,MAAM,CAACC,IAAP,KAAgBP,UAAU,CAACQ,WAA/B,EAA4C;AAC1C;AACD;;AAED,QAAM;AACJC,IAAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF;AADH,MAEFP,QAAQ,EAFZ;AAIA,QAAMQ,IAAI,GAAGD,IAAI,CAACJ,MAAM,CAACM,OAAP,CAAeC,EAAhB,CAAjB;;AACA,MAAIF,IAAI,CAACJ,IAAL,KAAc,UAAlB,EAA8B;AAC5B;AACD;;AAEDO,EAAAA,YAAY,CAACb,KAAD,CAAZ;AACAA,EAAAA,KAAK,GAAGc,UAAU,CAAC,YAAY;AAC7BC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,UAAMC,MAAM,GAAG,MAAMnB,MAAM,CAACO,MAAM,CAACM,OAAP,CAAeO,OAAhB,CAA3B;AAEAf,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEP,UAAU,CAACoB,cADV;AAEPR,MAAAA,OAAO,EAAEM;AAFF,KAAD,CAAR;AAID,GARiB,EAQf,GARe,CAAlB;AASD,CA7BI","sourcesContent":["import { bundle } from \"bundler\";\nimport { ActionType } from \"state/action-types\";\nimport { Middleware } from \"state/middleware/middleware\";\n\nlet timer: any;\n\nexport const bundlerMiddleware: Middleware =\n  ({ getState, dispatch }) =>\n  (next) =>\n  (action) => {\n    next(action);\n\n    if (action.type !== ActionType.UPDATE_CELL) {\n      return;\n    }\n\n    const {\n      cells: { data },\n    } = getState();\n\n    const cell = data[action.payload.id];\n    if (cell.type === \"markdown\") {\n      return;\n    }\n\n    clearTimeout(timer);\n    timer = setTimeout(async () => {\n      console.log(\"starting bundling\");\n      const result = await bundle(action.payload.content);\n\n      dispatch({\n        type: ActionType.BUNDLE_CREATED,\n        payload: result,\n      });\n    }, 750);\n  };\n"]},"metadata":{},"sourceType":"module"}