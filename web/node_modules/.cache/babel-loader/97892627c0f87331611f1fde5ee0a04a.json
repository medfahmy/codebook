{"ast":null,"code":"import produce from \"immer\";\nimport { ActionType } from \"state/action-types\";\nconst initialState = {\n  loading: false,\n  error: null,\n  order: [],\n  data: {}\n};\nconst reducer = produce((state = initialState, action) => {\n  switch (action.type) {\n    case ActionType.MOVE_CELL:\n      return state;\n\n    case ActionType.UPDATE_CELL:\n      const {\n        id,\n        content\n      } = action.payload;\n      state.data[id].content = content;\n\n    case ActionType.INSERT_CELL_BEFORE:\n      return state;\n\n    case ActionType.DELETE_CELL:\n      return state;\n  }\n});\nexport default reducer;","map":{"version":3,"sources":["/home/mfahmy/workspace/react/codebook/src/state/reducers/cell-reducer.ts"],"names":["produce","ActionType","initialState","loading","error","order","data","reducer","state","action","type","MOVE_CELL","UPDATE_CELL","id","content","payload","INSERT_CELL_BEFORE","DELETE_CELL"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AACA,SAASC,UAAT,QAA2B,oBAA3B;AAaA,MAAMC,YAAuB,GAAG;AAC9BC,EAAAA,OAAO,EAAE,KADqB;AAE9BC,EAAAA,KAAK,EAAE,IAFuB;AAG9BC,EAAAA,KAAK,EAAE,EAHuB;AAI9BC,EAAAA,IAAI,EAAE;AAJwB,CAAhC;AAOA,MAAMC,OAAO,GAAGP,OAAO,CACrB,CAACQ,KAAgB,GAAGN,YAApB,EAAkCO,MAAlC,KAAgE;AAC9D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,UAAU,CAACU,SAAhB;AACE,aAAOH,KAAP;;AACF,SAAKP,UAAU,CAACW,WAAhB;AACE,YAAM;AAAEC,QAAAA,EAAF;AAAMC,QAAAA;AAAN,UAAkBL,MAAM,CAACM,OAA/B;AAEAP,MAAAA,KAAK,CAACF,IAAN,CAAWO,EAAX,EAAeC,OAAf,GAAyBA,OAAzB;;AAEF,SAAKb,UAAU,CAACe,kBAAhB;AACE,aAAOR,KAAP;;AACF,SAAKP,UAAU,CAACgB,WAAhB;AACE,aAAOT,KAAP;AAXJ;AAaD,CAfoB,CAAvB;AAkBA,eAAeD,OAAf","sourcesContent":["import produce from \"immer\";\nimport { ActionType } from \"state/action-types\";\nimport { Action } from \"state/actions\";\nimport { Cell } from \"state/cell\";\n\ninterface CellState {\n  loading: boolean;\n  error: string | null;\n  order: string[];\n  data: {\n    [key: string]: Cell;\n  };\n}\n\nconst initialState: CellState = {\n  loading: false,\n  error: null,\n  order: [],\n  data: {},\n};\n\nconst reducer = produce(\n  (state: CellState = initialState, action: Action): CellState => {\n    switch (action.type) {\n      case ActionType.MOVE_CELL:\n        return state;\n      case ActionType.UPDATE_CELL:\n        const { id, content } = action.payload;\n\n        state.data[id].content = content;\n\n      case ActionType.INSERT_CELL_BEFORE:\n        return state;\n      case ActionType.DELETE_CELL:\n        return state;\n    }\n  }\n);\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}