{"ast":null,"code":"var _jsxFileName = \"/home/mfahmy/workspace/react/codebook/src/components/code-editor.tsx\",\n    _s = $RefreshSig$();\n\nimport MonacoEditor from \"@monaco-editor/react\";\nimport React, { useRef } from \"react\";\nimport prettier from \"prettier\";\nimport parser from \"prettier/parser-babel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CodeEditor = function ({\n  initialValue,\n  onChange\n}) {\n  _s();\n\n  const editorRef = useRef();\n\n  const handleMount = function (editor, monaco) {\n    var _editor$getModel;\n\n    editorRef.current = editor;\n    (_editor$getModel = editor.getModel()) === null || _editor$getModel === void 0 ? void 0 : _editor$getModel.updateOptions({\n      tabSize: 2\n    });\n  };\n\n  const handleChange = function (value, event) {\n    onChange(value);\n  };\n\n  const onFormatClick = function () {\n    var _editorRef$current, _editorRef$current2;\n\n    // get the current value from the editor\n    const value = (_editorRef$current = editorRef.current) === null || _editorRef$current === void 0 ? void 0 : _editorRef$current.getValue(); // const value = editorRef.current?.getModel()?.getValue();\n\n    console.log(value); // format the value\n\n    const formattedValue = prettier.format(value, {\n      parser: \"babel\",\n      plugins: parser\n    }); // ?prettier(value);\n    // set the formatted value in the editor\n\n    (_editorRef$current2 = editorRef.current) === null || _editorRef$current2 === void 0 ? void 0 : _editorRef$current2.setValue(formattedValue);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onFormatClick,\n      children: \"Format\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MonacoEditor, {\n      onMount: handleMount,\n      onChange: handleChange,\n      value: initialValue,\n      theme: \"vs-dark\",\n      language: \"javascript\",\n      height: \"350px\",\n      options: {\n        wordWrap: \"on\",\n        minimap: {\n          enabled: false\n        },\n        showUnused: false,\n        folding: false,\n        lineNumbersMinChars: 3,\n        fontSize: 16,\n        scrollBeyondLastLine: false,\n        automaticLayout: true\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CodeEditor, \"U23Mj2fZUVBkuOSyNtK9IkK2H0s=\");\n\n_c = CodeEditor;\nexport default CodeEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"sources":["/home/mfahmy/workspace/react/codebook/src/components/code-editor.tsx"],"names":["MonacoEditor","React","useRef","prettier","parser","CodeEditor","initialValue","onChange","editorRef","handleMount","editor","monaco","current","getModel","updateOptions","tabSize","handleChange","value","event","onFormatClick","getValue","console","log","formattedValue","format","plugins","setValue","wordWrap","minimap","enabled","showUnused","folding","lineNumbersMinChars","fontSize","scrollBeyondLastLine","automaticLayout"],"mappings":";;;AAAA,OAAOA,YAAP,MAAgD,sBAAhD;AAEA,OAAOC,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;;;AAOA,MAAMC,UAA2B,GAAG,UAAU;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA;AAAhB,CAAV,EAAsC;AAAA;;AACxE,QAAMC,SAAS,GAAGN,MAAM,EAAxB;;AAEA,QAAMO,WAAoB,GAAG,UAAUC,MAAV,EAAkBC,MAAlB,EAA0B;AAAA;;AACrDH,IAAAA,SAAS,CAACI,OAAV,GAAoBF,MAApB;AACA,wBAAAA,MAAM,CAACG,QAAP,wEAAmBC,aAAnB,CAAiC;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAjC;AACD,GAHD;;AAKA,QAAMC,YAAsB,GAAG,UAAUC,KAAV,EAAiBC,KAAjB,EAAwB;AACrDX,IAAAA,QAAQ,CAACU,KAAD,CAAR;AACD,GAFD;;AAIA,QAAME,aAAa,GAAG,YAAY;AAAA;;AAChC;AACA,UAAMF,KAAK,yBAAGT,SAAS,CAACI,OAAb,uDAAG,mBAAmBQ,QAAnB,EAAd,CAFgC,CAGhC;;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ,EAJgC,CAMhC;;AACA,UAAMM,cAAc,GAAGpB,QAAQ,CAACqB,MAAT,CAAgBP,KAAhB,EAAuB;AAC5Cb,MAAAA,MAAM,EAAE,OADoC;AAE5CqB,MAAAA,OAAO,EAAErB;AAFmC,KAAvB,CAAvB,CAPgC,CAU5B;AAEJ;;AACA,2BAAAI,SAAS,CAACI,OAAV,4EAAmBc,QAAnB,CAA4BH,cAA5B;AACD,GAdD;;AAgBA,sBACE;AAAA,4BACE;AAAQ,MAAA,OAAO,EAAEJ,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,YAAD;AACE,MAAA,OAAO,EAAEV,WADX;AAEE,MAAA,QAAQ,EAAEO,YAFZ;AAGE,MAAA,KAAK,EAAEV,YAHT;AAIE,MAAA,KAAK,EAAC,SAJR;AAKE,MAAA,QAAQ,EAAC,YALX;AAME,MAAA,MAAM,EAAC,OANT;AAOE,MAAA,OAAO,EAAE;AACPqB,QAAAA,QAAQ,EAAE,IADH;AAEPC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAFF;AAGPC,QAAAA,UAAU,EAAE,KAHL;AAIPC,QAAAA,OAAO,EAAE,KAJF;AAKPC,QAAAA,mBAAmB,EAAE,CALd;AAMPC,QAAAA,QAAQ,EAAE,EANH;AAOPC,QAAAA,oBAAoB,EAAE,KAPf;AAQPC,QAAAA,eAAe,EAAE;AARV;AAPX;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD,CAnDD;;GAAM9B,U;;KAAAA,U;AAqDN,eAAeA,UAAf","sourcesContent":["import MonacoEditor, { OnChange, OnMount } from \"@monaco-editor/react\";\nimport { editor } from \"monaco-editor\";\nimport React, { useRef } from \"react\";\nimport prettier from \"prettier\";\nimport parser from \"prettier/parser-babel\";\n\ninterface Props {\n  initialValue: string;\n  onChange: (value: string | undefined) => void;\n}\n\nconst CodeEditor: React.FC<Props> = function ({ initialValue, onChange }) {\n  const editorRef = useRef<editor.IStandaloneCodeEditor>();\n\n  const handleMount: OnMount = function (editor, monaco) {\n    editorRef.current = editor;\n    editor.getModel()?.updateOptions({ tabSize: 2 });\n  };\n\n  const handleChange: OnChange = function (value, event) {\n    onChange(value);\n  };\n\n  const onFormatClick = function () {\n    // get the current value from the editor\n    const value = editorRef.current?.getValue();\n    // const value = editorRef.current?.getModel()?.getValue();\n    console.log(value);\n\n    // format the value\n    const formattedValue = prettier.format(value, {\n      parser: \"babel\",\n      plugins: parser,\n    }); // ?prettier(value);\n\n    // set the formatted value in the editor\n    editorRef.current?.setValue(formattedValue);\n  };\n\n  return (\n    <div>\n      <button onClick={onFormatClick}>Format</button>\n      <MonacoEditor\n        onMount={handleMount}\n        onChange={handleChange}\n        value={initialValue}\n        theme=\"vs-dark\"\n        language=\"javascript\"\n        height=\"350px\"\n        options={{\n          wordWrap: \"on\",\n          minimap: { enabled: false },\n          showUnused: false,\n          folding: false,\n          lineNumbersMinChars: 3,\n          fontSize: 16,\n          scrollBeyondLastLine: false,\n          automaticLayout: true,\n        }}\n      />\n    </div>\n  );\n};\n\nexport default CodeEditor;\n"]},"metadata":{},"sourceType":"module"}