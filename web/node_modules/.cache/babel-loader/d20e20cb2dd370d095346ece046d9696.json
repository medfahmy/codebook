{"ast":null,"code":"var _jsxFileName = \"/home/mfahmy/workspace/react/codebook/src/components/code-cell.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport CodeEditor from \"components/code-editor\";\nimport Preview from \"components/preview\";\nimport { Resizable } from \"components/resizable\";\nimport { useActions } from \"hooks/use-actions\";\nimport { useTypedSelector } from \"hooks/use-typed-selector\";\nimport \"bulmaswatch/superhero/bulmaswatch.min.css\";\nimport \"styles/code-cell.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CodeCell = ({\n  cell\n}) => {\n  _s();\n\n  const {\n    updateCell,\n    createBundle\n  } = useActions();\n  const bundle = useTypedSelector(state => state.bundles[cell.id]);\n  const cumulativeCode = useTypedSelector(state => {\n    const {\n      data,\n      order\n    } = state.cells;\n    const orderedCells = order.map(id => data[id]);\n    const showFunc = `\n      import _React from \"react\";\n      import _ReactDOM from \"react-dom\";\n      const show = (value) => {\n        const root = document.querySelector(\"#root\");\n\n        if (typeof value === \"object\") {\n          if (value.$$typeof && value.props) {\n            _ReactDOM.render(value, root);\n          } else {\n            root.innerHTML = JSON.stringify(value);\n          }\n\n        } else {\n          root.innerHTML = value;\n        }\n\n      };\n     `;\n    const cumulativeCode = [];\n\n    for (let c of orderedCells) {\n      if (c.type === \"code\") {\n        cumulativeCode.push(c.content);\n      }\n\n      if (c.id === cell.id) {\n        break;\n      }\n    }\n\n    return cumulativeCode;\n  });\n  useEffect(() => {\n    if (!bundle) {\n      createBundle(cell.id, cumulativeCode.join(\"\\n\"));\n      return;\n    }\n\n    const timer = setTimeout(async () => {\n      createBundle(cell.id, cumulativeCode.join(\"\\n\"));\n    }, 1000);\n    return () => {\n      clearTimeout(timer);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cell.id, cumulativeCode.join(\"\\n\"), createBundle]);\n  return /*#__PURE__*/_jsxDEV(Resizable, {\n    direction: \"vertical\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"calc(100% - 10px)\",\n        display: \"flex\",\n        flexDirection: \"row\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Resizable, {\n        direction: \"horizontal\",\n        children: /*#__PURE__*/_jsxDEV(CodeEditor, {\n          initialValue: cell.content,\n          onChange: value => updateCell(cell.id, value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"preview-wrapper\",\n        children: !bundle || bundle.loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-cover\",\n          children: /*#__PURE__*/_jsxDEV(\"progress\", {\n            className: \"progress is-small is-primary\",\n            max: \"100\",\n            children: \"loading\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Preview, {\n          code: bundle.code,\n          err: bundle.err\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CodeCell, \"r5M9pii0T6hMXRNyIRC8DN3Hi6E=\", false, function () {\n  return [useActions, useTypedSelector, useTypedSelector];\n});\n\n_c = CodeCell;\nexport default CodeCell;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeCell\");","map":{"version":3,"sources":["/home/mfahmy/workspace/react/codebook/src/components/code-cell.tsx"],"names":["React","useEffect","CodeEditor","Preview","Resizable","useActions","useTypedSelector","CodeCell","cell","updateCell","createBundle","bundle","state","bundles","id","cumulativeCode","data","order","cells","orderedCells","map","showFunc","c","type","push","content","join","timer","setTimeout","clearTimeout","height","display","flexDirection","value","loading","code","err"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport CodeEditor from \"components/code-editor\";\nimport Preview from \"components/preview\";\nimport { Resizable } from \"components/resizable\";\nimport { Cell } from \"state\";\nimport { useActions } from \"hooks/use-actions\";\nimport { useTypedSelector } from \"hooks/use-typed-selector\";\nimport \"bulmaswatch/superhero/bulmaswatch.min.css\";\nimport \"styles/code-cell.css\";\n\ninterface CodeCellProps {\n  cell: Cell;\n}\n\nconst CodeCell: React.FC<CodeCellProps> = ({ cell }) => {\n  const { updateCell, createBundle } = useActions();\n  const bundle = useTypedSelector((state) => state.bundles[cell.id]);\n\n  const cumulativeCode = useTypedSelector((state) => {\n    const { data, order } = state.cells;\n    const orderedCells = order.map((id) => data[id]);\n\n    const showFunc = `\n      import _React from \"react\";\n      import _ReactDOM from \"react-dom\";\n      const show = (value) => {\n        const root = document.querySelector(\"#root\");\n\n        if (typeof value === \"object\") {\n          if (value.$$typeof && value.props) {\n            _ReactDOM.render(value, root);\n          } else {\n            root.innerHTML = JSON.stringify(value);\n          }\n\n        } else {\n          root.innerHTML = value;\n        }\n\n      };\n     `;\n\n    const cumulativeCode = [];\n\n    for (let c of orderedCells) {\n      if (c.type === \"code\") {\n        cumulativeCode.push(c.content);\n      }\n      if (c.id === cell.id) {\n        break;\n      }\n    }\n    return cumulativeCode;\n  });\n\n  useEffect(() => {\n    if (!bundle) {\n      createBundle(cell.id, cumulativeCode.join(\"\\n\"));\n      return;\n    }\n\n    const timer = setTimeout(async () => {\n      createBundle(cell.id, cumulativeCode.join(\"\\n\"));\n    }, 1000);\n\n    return () => {\n      clearTimeout(timer);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cell.id, cumulativeCode.join(\"\\n\"), createBundle]);\n\n  return (\n    <Resizable direction=\"vertical\">\n      <div\n        style={{\n          height: \"calc(100% - 10px)\",\n          display: \"flex\",\n          flexDirection: \"row\",\n        }}\n      >\n        <Resizable direction=\"horizontal\">\n          <CodeEditor\n            initialValue={cell.content}\n            onChange={(value) => updateCell(cell.id, value)}\n          />\n        </Resizable>\n\n        <div className=\"preview-wrapper\">\n          {!bundle || bundle.loading ? (\n            <div className=\"progress-cover\">\n              <progress className=\"progress is-small is-primary\" max=\"100\">\n                loading\n              </progress>\n            </div>\n          ) : (\n            <Preview code={bundle.code} err={bundle.err} />\n          )}\n        </div>\n      </div>\n    </Resizable>\n  );\n};\n\nexport default CodeCell;\n"]},"metadata":{},"sourceType":"module"}