{"ast":null,"code":"import produce from \"immer\";\nimport { ActionType } from \"state/action-types\";\nconst initialState = {\n  loading: false,\n  error: null,\n  order: [],\n  data: {}\n};\nconst reducer = produce((state = initialState, action) => {\n  switch (action.type) {\n    case ActionType.UPDATE_CELL:\n      const {\n        id,\n        content\n      } = action.payload;\n      state.data[id].content = content;\n      return;\n\n    case ActionType.DELETE_CELL:\n      delete state.data[action.payload];\n      state.order.filter(id => id !== action.payload);\n      return;\n\n    case ActionType.MOVE_CELL:\n      const {\n        direction\n      } = action.payload;\n      const index = state.order.findIndex(id => id === action.payload.id);\n      const targetIndex = direction === \"up\" ? index - 1 : index + 1;\n\n    case ActionType.INSERT_CELL_BEFORE:\n      return state;\n  }\n});\nexport default reducer;","map":{"version":3,"sources":["/home/mfahmy/workspace/react/codebook/src/state/reducers/cell-reducer.ts"],"names":["produce","ActionType","initialState","loading","error","order","data","reducer","state","action","type","UPDATE_CELL","id","content","payload","DELETE_CELL","filter","MOVE_CELL","direction","index","findIndex","targetIndex","INSERT_CELL_BEFORE"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AACA,SAASC,UAAT,QAA2B,oBAA3B;AAaA,MAAMC,YAAuB,GAAG;AAC9BC,EAAAA,OAAO,EAAE,KADqB;AAE9BC,EAAAA,KAAK,EAAE,IAFuB;AAG9BC,EAAAA,KAAK,EAAE,EAHuB;AAI9BC,EAAAA,IAAI,EAAE;AAJwB,CAAhC;AAOA,MAAMC,OAAO,GAAGP,OAAO,CAAC,CAACQ,KAAgB,GAAGN,YAApB,EAAkCO,MAAlC,KAAqD;AAC3E,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,UAAU,CAACU,WAAhB;AACE,YAAM;AAAEC,QAAAA,EAAF;AAAMC,QAAAA;AAAN,UAAkBJ,MAAM,CAACK,OAA/B;AACAN,MAAAA,KAAK,CAACF,IAAN,CAAWM,EAAX,EAAeC,OAAf,GAAyBA,OAAzB;AACA;;AAEF,SAAKZ,UAAU,CAACc,WAAhB;AACE,aAAOP,KAAK,CAACF,IAAN,CAAWG,MAAM,CAACK,OAAlB,CAAP;AACAN,MAAAA,KAAK,CAACH,KAAN,CAAYW,MAAZ,CAAoBJ,EAAD,IAAQA,EAAE,KAAKH,MAAM,CAACK,OAAzC;AACA;;AAEF,SAAKb,UAAU,CAACgB,SAAhB;AACE,YAAM;AAAEC,QAAAA;AAAF,UAAgBT,MAAM,CAACK,OAA7B;AACA,YAAMK,KAAK,GAAGX,KAAK,CAACH,KAAN,CAAYe,SAAZ,CAAuBR,EAAD,IAAQA,EAAE,KAAKH,MAAM,CAACK,OAAP,CAAeF,EAApD,CAAd;AACA,YAAMS,WAAW,GAAGH,SAAS,KAAK,IAAd,GAAqBC,KAAK,GAAG,CAA7B,GAAiCA,KAAK,GAAG,CAA7D;;AAEF,SAAKlB,UAAU,CAACqB,kBAAhB;AACE,aAAOd,KAAP;AAjBJ;AAmBD,CApBsB,CAAvB;AAsBA,eAAeD,OAAf","sourcesContent":["import produce from \"immer\";\nimport { ActionType } from \"state/action-types\";\nimport { Action } from \"state/actions\";\nimport { Cell } from \"state/cell\";\n\ninterface CellState {\n  loading: boolean;\n  error: string | null;\n  order: string[];\n  data: {\n    [key: string]: Cell;\n  };\n}\n\nconst initialState: CellState = {\n  loading: false,\n  error: null,\n  order: [],\n  data: {},\n};\n\nconst reducer = produce((state: CellState = initialState, action: Action) => {\n  switch (action.type) {\n    case ActionType.UPDATE_CELL:\n      const { id, content } = action.payload;\n      state.data[id].content = content;\n      return;\n\n    case ActionType.DELETE_CELL:\n      delete state.data[action.payload];\n      state.order.filter((id) => id !== action.payload);\n      return;\n\n    case ActionType.MOVE_CELL:\n      const { direction } = action.payload;\n      const index = state.order.findIndex((id) => id === action.payload.id);\n      const targetIndex = direction === \"up\" ? index - 1 : index + 1;\n\n    case ActionType.INSERT_CELL_BEFORE:\n      return state;\n  }\n});\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}