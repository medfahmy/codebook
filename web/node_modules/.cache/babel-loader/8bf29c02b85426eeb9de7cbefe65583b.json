{"ast":null,"code":"var _jsxFileName = \"/home/mfahmy/workspace/react/codebook/src/components/code-editor.tsx\",\n    _s = $RefreshSig$();\n\nimport MonacoEditor from \"@monaco-editor/react\";\nimport React, { useRef } from \"react\";\nimport prettier from \"prettier\";\nimport parser from \"prettier/parser-babel\";\nimport \"styles/code-editor.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CodeEditor = function ({\n  initialValue,\n  onChange\n}) {\n  _s();\n\n  const editorRef = useRef();\n\n  const handleMount = function (editor) {\n    var _editor$getModel;\n\n    editorRef.current = editor;\n    (_editor$getModel = editor.getModel()) === null || _editor$getModel === void 0 ? void 0 : _editor$getModel.updateOptions({\n      tabSize: 2\n    });\n  };\n\n  const handleChange = function (value) {\n    if (value) {\n      onChange(value);\n    }\n  };\n\n  const onFormatClick = function () {\n    var _editorRef$current, _editorRef$current2;\n\n    // get the current value from the editor\n    const value = (_editorRef$current = editorRef.current) === null || _editorRef$current === void 0 ? void 0 : _editorRef$current.getValue(); // const value = editorRef.current?.getModel()?.getValue();\n    // format the value\n\n    let formatted = \"\";\n\n    if (value) {\n      formatted = prettier.format(value, {\n        parser: \"babel\",\n        plugins: [parser],\n        useTabs: false\n      }).replace(/\\n$/, \"\");\n    } // set the formatted value in the editor\n\n\n    (_editorRef$current2 = editorRef.current) === null || _editorRef$current2 === void 0 ? void 0 : _editorRef$current2.setValue(formatted);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"editor-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button button-format is-primary is-small\",\n      onClick: onFormatClick,\n      children: \"Format\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MonacoEditor, {\n      onMount: handleMount,\n      onChange: handleChange,\n      value: initialValue,\n      theme: \"vs-dark\",\n      language: \"javascript\",\n      height: \"350px\",\n      options: {\n        wordWrap: \"on\",\n        minimap: {\n          enabled: false\n        },\n        showUnused: false,\n        folding: false,\n        lineNumbersMinChars: 3,\n        fontSize: 16,\n        scrollBeyondLastLine: false,\n        automaticLayout: true\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CodeEditor, \"U23Mj2fZUVBkuOSyNtK9IkK2H0s=\");\n\n_c = CodeEditor;\nexport default CodeEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"sources":["/home/mfahmy/workspace/react/codebook/src/components/code-editor.tsx"],"names":["MonacoEditor","React","useRef","prettier","parser","CodeEditor","initialValue","onChange","editorRef","handleMount","editor","current","getModel","updateOptions","tabSize","handleChange","value","onFormatClick","getValue","formatted","format","plugins","useTabs","replace","setValue","wordWrap","minimap","enabled","showUnused","folding","lineNumbersMinChars","fontSize","scrollBeyondLastLine","automaticLayout"],"mappings":";;;AAAA,OAAOA,YAAP,MAAgD,sBAAhD;AAEA,OAAOC,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,OAAO,wBAAP;;;AAOA,MAAMC,UAA2B,GAAG,UAAU;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA;AAAhB,CAAV,EAAsC;AAAA;;AACxE,QAAMC,SAAS,GAAGN,MAAM,EAAxB;;AAEA,QAAMO,WAAoB,GAAG,UAAUC,MAAV,EAAkB;AAAA;;AAC7CF,IAAAA,SAAS,CAACG,OAAV,GAAoBD,MAApB;AACA,wBAAAA,MAAM,CAACE,QAAP,wEAAmBC,aAAnB,CAAiC;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAjC;AACD,GAHD;;AAKA,QAAMC,YAAsB,GAAG,UAAUC,KAAV,EAAiB;AAC9C,QAAIA,KAAJ,EAAW;AACTT,MAAAA,QAAQ,CAACS,KAAD,CAAR;AACD;AACF,GAJD;;AAMA,QAAMC,aAAa,GAAG,YAAY;AAAA;;AAChC;AACA,UAAMD,KAAK,yBAAGR,SAAS,CAACG,OAAb,uDAAG,mBAAmBO,QAAnB,EAAd,CAFgC,CAGhC;AAEA;;AACA,QAAIC,SAAS,GAAG,EAAhB;;AACA,QAAIH,KAAJ,EAAW;AACTG,MAAAA,SAAS,GAAGhB,QAAQ,CACjBiB,MADS,CACFJ,KADE,EACK;AACbZ,QAAAA,MAAM,EAAE,OADK;AAEbiB,QAAAA,OAAO,EAAE,CAACjB,MAAD,CAFI;AAGbkB,QAAAA,OAAO,EAAE;AAHI,OADL,EAMTC,OANS,CAMD,KANC,EAMM,EANN,CAAZ;AAOD,KAf+B,CAiBhC;;;AACA,2BAAAf,SAAS,CAACG,OAAV,4EAAmBa,QAAnB,CAA4BL,SAA5B;AACD,GAnBD;;AAqBA,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,4BACE;AACE,MAAA,SAAS,EAAC,0CADZ;AAEE,MAAA,OAAO,EAAEF,aAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAOE,QAAC,YAAD;AACE,MAAA,OAAO,EAAER,WADX;AAEE,MAAA,QAAQ,EAAEM,YAFZ;AAGE,MAAA,KAAK,EAAET,YAHT;AAIE,MAAA,KAAK,EAAC,SAJR;AAKE,MAAA,QAAQ,EAAC,YALX;AAME,MAAA,MAAM,EAAC,OANT;AAOE,MAAA,OAAO,EAAE;AACPmB,QAAAA,QAAQ,EAAE,IADH;AAEPC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAFF;AAGPC,QAAAA,UAAU,EAAE,KAHL;AAIPC,QAAAA,OAAO,EAAE,KAJF;AAKPC,QAAAA,mBAAmB,EAAE,CALd;AAMPC,QAAAA,QAAQ,EAAE,EANH;AAOPC,QAAAA,oBAAoB,EAAE,KAPf;AAQPC,QAAAA,eAAe,EAAE;AARV;AAPX;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA4BD,CA/DD;;GAAM5B,U;;KAAAA,U;AAiEN,eAAeA,UAAf","sourcesContent":["import MonacoEditor, { OnChange, OnMount } from \"@monaco-editor/react\";\nimport { editor } from \"monaco-editor\";\nimport React, { useRef } from \"react\";\nimport prettier from \"prettier\";\nimport parser from \"prettier/parser-babel\";\nimport \"styles/code-editor.css\";\n\ninterface Props {\n  initialValue: string;\n  onChange: (value: string) => void;\n}\n\nconst CodeEditor: React.FC<Props> = function ({ initialValue, onChange }) {\n  const editorRef = useRef<editor.IStandaloneCodeEditor>();\n\n  const handleMount: OnMount = function (editor) {\n    editorRef.current = editor;\n    editor.getModel()?.updateOptions({ tabSize: 2 });\n  };\n\n  const handleChange: OnChange = function (value) {\n    if (value) {\n      onChange(value);\n    }\n  };\n\n  const onFormatClick = function () {\n    // get the current value from the editor\n    const value = editorRef.current?.getValue();\n    // const value = editorRef.current?.getModel()?.getValue();\n\n    // format the value\n    let formatted = \"\";\n    if (value) {\n      formatted = prettier\n        .format(value, {\n          parser: \"babel\",\n          plugins: [parser],\n          useTabs: false,\n        })\n        .replace(/\\n$/, \"\");\n    }\n\n    // set the formatted value in the editor\n    editorRef.current?.setValue(formatted);\n  };\n\n  return (\n    <div className=\"editor-wrapper\">\n      <button\n        className=\"button button-format is-primary is-small\"\n        onClick={onFormatClick}\n      >\n        Format\n      </button>\n      <MonacoEditor\n        onMount={handleMount}\n        onChange={handleChange}\n        value={initialValue}\n        theme=\"vs-dark\"\n        language=\"javascript\"\n        height=\"350px\"\n        options={{\n          wordWrap: \"on\",\n          minimap: { enabled: false },\n          showUnused: false,\n          folding: false,\n          lineNumbersMinChars: 3,\n          fontSize: 16,\n          scrollBeyondLastLine: false,\n          automaticLayout: true,\n        }}\n      />\n    </div>\n  );\n};\n\nexport default CodeEditor;\n"]},"metadata":{},"sourceType":"module"}