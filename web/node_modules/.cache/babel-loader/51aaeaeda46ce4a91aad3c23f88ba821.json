{"ast":null,"code":"import produce from \"immer\";\nimport { ActionType } from \"state/action-types\";\nconst initialState = {};\nexport const bundleReducer = produce((state, action) => {\n  switch (action.type) {\n    case ActionType.BUNDLE_START:\n      state[action.payload.cellId] = {\n        loading: true,\n        code: \"\",\n        err: \"\"\n      };\n      return;\n\n    case ActionType.BUNDLE_COMPLETE:\n      state[action.payload.cellId] = {\n        loading: false,\n        code: action.payload.bundle.code,\n        err: action.payload.bundle.err\n      };\n      return;\n\n    default:\n      return state;\n  }\n}, initialState);","map":{"version":3,"sources":["/home/mfahmy/workspace/react/codebook/src/state/reducers/bundle-reducer.ts"],"names":["produce","ActionType","initialState","bundleReducer","state","action","type","BUNDLE_START","payload","cellId","loading","code","err","BUNDLE_COMPLETE","bundle"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AACA,SAASC,UAAT,QAA2B,oBAA3B;AAaA,MAAMC,YAAyB,GAAG,EAAlC;AAEA,OAAO,MAAMC,aAAa,GAAGH,OAAO,CAAC,CAACI,KAAD,EAAqBC,MAArB,KAAwC;AAC3E,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKL,UAAU,CAACM,YAAhB;AACEH,MAAAA,KAAK,CAACC,MAAM,CAACG,OAAP,CAAeC,MAAhB,CAAL,GAA+B;AAC7BC,QAAAA,OAAO,EAAE,IADoB;AAE7BC,QAAAA,IAAI,EAAE,EAFuB;AAG7BC,QAAAA,GAAG,EAAE;AAHwB,OAA/B;AAKA;;AAEF,SAAKX,UAAU,CAACY,eAAhB;AACET,MAAAA,KAAK,CAACC,MAAM,CAACG,OAAP,CAAeC,MAAhB,CAAL,GAA+B;AAC7BC,QAAAA,OAAO,EAAE,KADoB;AAE7BC,QAAAA,IAAI,EAAEN,MAAM,CAACG,OAAP,CAAeM,MAAf,CAAsBH,IAFC;AAG7BC,QAAAA,GAAG,EAAEP,MAAM,CAACG,OAAP,CAAeM,MAAf,CAAsBF;AAHE,OAA/B;AAKA;;AAEF;AACE,aAAOR,KAAP;AAlBJ;AAoBD,CArBmC,EAqBjCF,YArBiC,CAA7B","sourcesContent":["import produce from \"immer\";\nimport { ActionType } from \"state/action-types\";\nimport { Action } from \"state/actions\";\n\ninterface BundleState {\n  [key: string]:\n    | {\n        loading: boolean;\n        code: string;\n        err: string;\n      }\n    | undefined;\n}\n\nconst initialState: BundleState = {};\n\nexport const bundleReducer = produce((state: BundleState, action: Action) => {\n  switch (action.type) {\n    case ActionType.BUNDLE_START:\n      state[action.payload.cellId] = {\n        loading: true,\n        code: \"\",\n        err: \"\",\n      };\n      return;\n\n    case ActionType.BUNDLE_COMPLETE:\n      state[action.payload.cellId] = {\n        loading: false,\n        code: action.payload.bundle.code,\n        err: action.payload.bundle.err,\n      };\n      return;\n\n    default:\n      return state;\n  }\n}, initialState);\n"]},"metadata":{},"sourceType":"module"}